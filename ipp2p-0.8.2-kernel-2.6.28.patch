--- ipp2p-0.8.2.orig/ipt_ipp2p.c	2009-02-26 18:54:40.000000000 +0100
+++ ipp2p-0.8.2/ipt_ipp2p.c	2009-02-26 18:56:52.000000000 +0100
@@ -739,6 +739,10 @@
 #else
 static int
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+match(const struct sk_buff *skb,
+      const struct xt_match_param *match)
+#else
 match(const struct sk_buff *skb,
       const struct net_device *in,
       const struct net_device *out,
@@ -762,8 +766,13 @@
 #else
       int *hotdrop)
 #endif
+#endif
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+    const struct ipt_p2p_info *info = match->matchinfo;
+#else
     const struct ipt_p2p_info *info = matchinfo;
+#endif
     unsigned char  *haystack;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,22)
     struct iphdr *ip = ip_hdr(skb);
@@ -775,6 +784,9 @@
     int hlen = ntohs(ip->tot_len)-(ip->ihl*4);	/*hlen = packet-data length*/
 
     /*must not be a fragment*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+    int offset = match->fragoff;
+#endif
     if (offset) {
 	if (info->debug) printk("IPP2P.match: offset found %i \n",offset);
 	return 0;
@@ -848,6 +860,9 @@
 #else
 static int
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)
+checkentry(const struct xt_mtchk_param *param)
+#else
 checkentry(const char *tablename,
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,17)
            const void *ip, 
@@ -859,7 +874,13 @@
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,18)
 	   unsigned int matchsize,
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28)	   
+	   unsigned int hook_mask,
+	   u_int8_t family)
+#else
 	   unsigned int hook_mask)
+#endif
+#endif
 {
         /* Must specify -p tcp */
 /*    if (ip->proto != IPPROTO_TCP || (ip->invflags & IPT_INV_PROTO)) {
